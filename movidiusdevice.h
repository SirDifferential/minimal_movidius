#ifndef MOVIDIUSDEVICE_H
#define MOVIDIUSDEVICE_H

#include <stdint.h>
#include <algorithm>

#ifdef __cplusplus
extern "C" {
#endif

#include <mvnc.h>

#ifdef __cplusplus
} // extern "C"
#endif

enum
{
    MOVIDIUS_OK = 0,
    INVALID_DEV_HANDLE = 1,
    INVALID_INPUT_DATA = 2,
    DATA_LOAD_FAILED = 3,
    NOT_ALLOWED_THIS_TIME = 4,
    MOVIDIUS_ALLOCATEGRAPH_ERROR = 1000,
    MOVIDIUS_DEALLOCATEGRAPH_ERROR = 1001,
    MOVIDIUS_LOADTENSOR_ERROR = 1002,
    MOVIDIUS_NODEVICE_FOUND = 1003,
    MOVIDIUS_OPENDEVICE_FAILED = 1004,
    MOVIDIUS_CLOSEDEVICE_FAILED = 1005,
    MOVIDIUS_GETRESULT_FAILED = 1006,
    MOVIDIUS_GETGRAPHOPT_FAILED = 1007
};

typedef struct
{
    unsigned char r;
    unsigned char g;
    unsigned char b;
} movidius_RGB;

typedef struct
{
    uint16_t r;
    uint16_t g;
    uint16_t b;
} movidius_RGB_f16;

/**
  * Memset this struct to 0 before calling any of the functions for the first time
  * Start with movidius_openDevice() to get the device opened,
  * followed by uploading networks via movidius_uploadNetwork()
  * After this you can call movidius_runInference() to get results
  * Before allocating a new network make sure to call movidius_deallocateGraph()
  */
typedef struct
{
    /**
      * Name assigned by the mvnc API to the currently opened device
      * Make sure this is larger MVNC_MAXNAMESIZE
      */
    char dev_name[512];

    /**
     * Filled in openDevice()
     * Make sure to close this at some point
     */
    void* dev_handle;

    /**
      * Path to a folder containing caffe network files
      * set this to a value before calling movidius_uploadNetwork()
      */
    char networkPath[1024];

    /**
     * Contents of the currently loaded graph file, filled in loadGraphData
     */
    void* graphFileContents;

    /**
     * Amount of bytes loaded to memory from the above graph file
     */
    unsigned int graphFileLen;

    /**
     * Handle to a graph that's been uploaded to the movidius device
     */
    void* currentGraphHandle;

    /**
     * For the currently used network, the list of categories listed in categories.txt
     * The categories.txt is a caffe specific file that defines how many different classification
     * categories there are to be found in the analyzed neural network
     * These are for, for example the gender, the following: male, female, other
     */
    char** categories;

    /**
     * Number of categories in the categories list above
     */
    int numCategories;

    /**
      * The mean value of all data points in the current network, loaded from stats.txt
      * The stats.txt is generated by using some tool that's part of the movidius API, I think?
      */
    float mean[3];

    /**
     * The standard deviation of all the points in the current network data, loaded from stat.txt
     * Generated using the same tool as above, I think
     */
    float standard_deviation[3];

    /**
     * This image buffer is sized according to inputsize.txt in the network directory
     * It must be filled with image pixels scaled to that resolution with the following
     * function applied for every pixel:
     *
     *   r = ((float)image[i].r) - mean[0]) * standard_deviation[0];
     *   g = ((float)image[i].g) - mean[1]) * standard_deviation[1];
     *   b = ((float)image[i].b) - mean[2]) * standard_deviation[2];
     *
     * Call movidius_convertImage() to do this
     * This buffer will contain half-floats
     */
    movidius_RGB_f16* movidius_image;

    /**
     * The resolution of the currently allocated movidius_image
     */
    unsigned int currentImageSize;

    /**
     * buffer for containing the current image into reqsize * reqsize resolution of half floats
     */
    float* scaled_image;

    /**
     * The resolution the currently used network expects the images to be in
     */
    unsigned int reqsize;

} movidius_device;

/**
 * Finds any movidius neural compute sticks plugged in to the computer and opens them
 * The network given in the parameter is filled with a device pointer and name if the
 * open succeeded
 * Caller is expected to close the device at some point
 * Returns 0 on success
 */
extern int movidius_openDevice(movidius_device* dev);

/**
 * Closes the device, frees all allocated buffers, etc
 * @param dealloc_graph: If true, first tries to deallocate any graphs on the device
 * Returns 0 on success
 */
extern int movidius_closeDevice(movidius_device* dev, bool dealloc_graph);

/**
 * Uploads the caffe network at dev->networkPath onto the movidius device memory
 * Returns 0 on success
 */
extern int movidius_uploadNetwork(movidius_device* dev);

/**
 * Runs the inference for the current device and it's current image
 * The image is stored in the struct by running movidius_convertImage()
 * @param results: A list of dev->numCategories floats to be filled with results,
 * ie: [male 7%, female 90%, other 3%]
 * Returns 0 on success
 */
extern int movidius_runInference(movidius_device* dev, float* results);

/**
 * Deallocates the currently used graph on the device
 * Apparently the deallocation call does not exist on all devices though?
 * Returns 0 on success, pointers are set to NULL, host memory is freed
 */
extern int movidius_deallocateGraph(movidius_device* dev);

/**
 * Reads the given RGB888 image and converts its data into the internal float16 buffer,
 * to the format which movidius API expects. If the given image resolution does not match
 * dev->reqsize, error is printed and nothing is done
 * This function also applies the following function on the target image pixels:
 *
 *      (pixeldata - mean) * standard_deviation
 *
 * where the mean and standard deviation are loaded from the file mean.txt that describes the
 * mean and standard deviation values of the training set that was used to generate the caffe network
 */
extern int movidius_convertImage(movidius_RGB* colorimage, unsigned int color_width, unsigned int color_height, movidius_device* dev);

#endif // MOVIDIUSDEVICE_H
